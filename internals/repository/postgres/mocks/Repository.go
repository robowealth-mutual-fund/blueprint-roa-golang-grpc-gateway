// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	utils "github.com/robowealth-mutual-fund/blueprint-roa-golang/internals/utils"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *Repository) Begin() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Commit provides a mock function with given fields: db
func (_m *Repository) Commit(db *gorm.DB) *gorm.DB {
	ret := _m.Called(db)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Create provides a mock function with given fields: ent
func (_m *Repository) Create(ent interface{}) error {
	ret := _m.Called(ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: db, ent
func (_m *Repository) CreateTransaction(db *gorm.DB, ent interface{}) error {
	ret := _m.Called(db, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, interface{}) error); ok {
		r0 = rf(db, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filters, ent
func (_m *Repository) Find(filters map[string]interface{}, ent interface{}) error {
	ret := _m.Called(filters, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, interface{}) error); ok {
		r0 = rf(filters, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// First provides a mock function with given fields: filters, ent
func (_m *Repository) First(filters map[string]interface{}, ent interface{}) error {
	ret := _m.Called(filters, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, interface{}) error); ok {
		r0 = rf(filters, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsErrorRecordNotFound provides a mock function with given fields: err
func (_m *Repository) IsErrorRecordNotFound(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Last provides a mock function with given fields: filters, ent
func (_m *Repository) Last(filters map[string]interface{}, ent interface{}) error {
	ret := _m.Called(filters, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, interface{}) error); ok {
		r0 = rf(filters, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: tableName, offset, limit, filters, order, ent
func (_m *Repository) List(tableName string, offset int64, limit int64, filters interface{}, order interface{}, ent interface{}) (*utils.Pagination, error) {
	ret := _m.Called(tableName, offset, limit, filters, order, ent)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(string, int64, int64, interface{}, interface{}, interface{}) *utils.Pagination); ok {
		r0 = rf(tableName, offset, limit, filters, order, ent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64, interface{}, interface{}, interface{}) error); ok {
		r1 = rf(tableName, offset, limit, filters, order, ent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Raw provides a mock function with given fields: ent, sql, value
func (_m *Repository) Raw(ent interface{}, sql string, value ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ent, sql)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(ent, sql, value...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields: db
func (_m *Repository) Rollback(db *gorm.DB) *gorm.DB {
	ret := _m.Called(db)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// RollbackTo provides a mock function with given fields: db, input
func (_m *Repository) RollbackTo(db *gorm.DB, input string) *gorm.DB {
	ret := _m.Called(db, input)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *gorm.DB); ok {
		r0 = rf(db, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// SavePoint provides a mock function with given fields: db, input
func (_m *Repository) SavePoint(db *gorm.DB, input string) *gorm.DB {
	ret := _m.Called(db, input)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *gorm.DB); ok {
		r0 = rf(db, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Update provides a mock function with given fields: filters, ent
func (_m *Repository) Update(filters map[string]interface{}, ent interface{}) error {
	ret := _m.Called(filters, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, interface{}) error); ok {
		r0 = rf(filters, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: db, filters, ent
func (_m *Repository) UpdateTransaction(db *gorm.DB, filters map[string]interface{}, ent interface{}) error {
	ret := _m.Called(db, filters, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}, interface{}) error); ok {
		r0 = rf(db, filters, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: tableName, filters, ent
func (_m *Repository) Upsert(tableName string, filters map[string]interface{}, ent interface{}) error {
	ret := _m.Called(tableName, filters, ent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}, interface{}) error); ok {
		r0 = rf(tableName, filters, ent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
